// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LostLayer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("key", Value.fromBytes(Bytes.empty()));
    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LostLayer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LostLayer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LostLayer", id.toString(), this);
    }
  }

  static load(id: string): LostLayer | null {
    return changetype<LostLayer | null>(store.get("LostLayer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get key(): Bytes {
    let value = this.get("key");
    return value!.toBytes();
  }

  set key(value: Bytes) {
    this.set("key", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get parent(): string | null {
    let value = this.get("parent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parent(value: string | null) {
    if (!value) {
      this.unset("parent");
    } else {
      this.set("parent", Value.fromString(<string>value));
    }
  }

  get lostLayers(): Array<string> {
    let value = this.get("lostLayers");
    return value!.toStringArray();
  }

  set lostLayers(value: Array<string>) {
    this.set("lostLayers", Value.fromStringArray(value));
  }

  get lostWorlds(): Array<string> {
    let value = this.get("lostWorlds");
    return value!.toStringArray();
  }

  set lostWorlds(value: Array<string>) {
    this.set("lostWorlds", Value.fromStringArray(value));
  }
}

export class LostWorld extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("key", Value.fromBytes(Bytes.empty()));
    this.set("name", Value.fromString(""));
    this.set("lostLayer", Value.fromString(""));
    this.set("artist", Value.fromString(""));
    this.set("location", Value.fromString(""));
    this.set("lat", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("long", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("radius", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LostWorld entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LostWorld entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LostWorld", id.toString(), this);
    }
  }

  static load(id: string): LostWorld | null {
    return changetype<LostWorld | null>(store.get("LostWorld", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get key(): Bytes {
    let value = this.get("key");
    return value!.toBytes();
  }

  set key(value: Bytes) {
    this.set("key", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get lostLayer(): string {
    let value = this.get("lostLayer");
    return value!.toString();
  }

  set lostLayer(value: string) {
    this.set("lostLayer", Value.fromString(value));
  }

  get artist(): string {
    let value = this.get("artist");
    return value!.toString();
  }

  set artist(value: string) {
    this.set("artist", Value.fromString(value));
  }

  get location(): string {
    let value = this.get("location");
    return value!.toString();
  }

  set location(value: string) {
    this.set("location", Value.fromString(value));
  }

  get lat(): BigDecimal {
    let value = this.get("lat");
    return value!.toBigDecimal();
  }

  set lat(value: BigDecimal) {
    this.set("lat", Value.fromBigDecimal(value));
  }

  get long(): BigDecimal {
    let value = this.get("long");
    return value!.toBigDecimal();
  }

  set long(value: BigDecimal) {
    this.set("long", Value.fromBigDecimal(value));
  }

  get radius(): BigInt {
    let value = this.get("radius");
    return value!.toBigInt();
  }

  set radius(value: BigInt) {
    this.set("radius", Value.fromBigInt(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenID", Value.fromBigInt(BigInt.zero()));
    this.set("lostWorld", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value!.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get lostWorld(): string {
    let value = this.get("lostWorld");
    return value!.toString();
  }

  set lostWorld(value: string) {
    this.set("lostWorld", Value.fromString(value));
  }
}
