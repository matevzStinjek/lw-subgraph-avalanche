// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ExecutedCompletionStruct extends ethereum.Event {
  get params(): ExecutedCompletionStruct__Params {
    return new ExecutedCompletionStruct__Params(this);
  }
}

export class ExecutedCompletionStruct__Params {
  _event: ExecutedCompletionStruct;

  constructor(event: ExecutedCompletionStruct) {
    this._event = event;
  }

  get register(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get initializationParams_(): InitializedInitializationParams_Struct {
    return changetype<InitializedInitializationParams_Struct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get addressHolder_(): InitializedAddressHolder_Struct {
    return changetype<InitializedAddressHolder_Struct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get variations_(): Array<InitializedVariations_Struct> {
    return this._event.parameters[2].value.toTupleArray<
      InitializedVariations_Struct
    >();
  }

  get dividendLevels(): Array<InitializedDividendLevelsStruct> {
    return this._event.parameters[3].value.toTupleArray<
      InitializedDividendLevelsStruct
    >();
  }
}

export class InitializedInitializationParams_Struct extends ethereum.Tuple {
  get name_(): string {
    return this[0].toString();
  }

  get symbol_(): string {
    return this[1].toString();
  }

  get imageLinkInformation_(): Bytes {
    return this[2].toBytes();
  }

  get metadata_(): Bytes {
    return this[3].toBytes();
  }

  get royaltyDeterminerInformation_(): Bytes {
    return this[4].toBytes();
  }

  get signatureData_(): Bytes {
    return this[5].toBytes();
  }

  get royaltyTokenImageURI_(): string {
    return this[6].toString();
  }

  get admin_(): Address {
    return this[7].toAddress();
  }

  get wallet_(): Address {
    return this[8].toAddress();
  }

  get royaltyBeeps_(): i32 {
    return this[9].toI32();
  }

  get tokenFactory_(): Address {
    return this[10].toAddress();
  }
}

export class InitializedAddressHolder_Struct extends ethereum.Tuple {
  get royaltyDeterminer(): Address {
    return this[0].toAddress();
  }

  get variationInterpreter(): Address {
    return this[1].toAddress();
  }

  get contextInterpreter(): Address {
    return this[2].toAddress();
  }

  get metadataInterpreter(): Address {
    return this[3].toAddress();
  }

  get imageInformationInterpreter(): Address {
    return this[4].toAddress();
  }

  get signatureVerifier(): Address {
    return this[5].toAddress();
  }

  get dividendHandler(): Address {
    return this[6].toAddress();
  }

  get variationSelector(): Address {
    return this[7].toAddress();
  }
}

export class InitializedVariations_Struct extends ethereum.Tuple {
  get amount(): i32 {
    return this[0].toI32();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }
}

export class InitializedDividendLevelsStruct extends ethereum.Tuple {
  get upperLimit(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class NewDividendLevelIndex extends ethereum.Event {
  get params(): NewDividendLevelIndex__Params {
    return new NewDividendLevelIndex__Params(this);
  }
}

export class NewDividendLevelIndex__Params {
  _event: NewDividendLevelIndex;

  constructor(event: NewDividendLevelIndex) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewPriceRangeIndex extends ethereum.Event {
  get params(): NewPriceRangeIndex__Params {
    return new NewPriceRangeIndex__Params(this);
  }
}

export class NewPriceRangeIndex__Params {
  _event: NewPriceRangeIndex;

  constructor(event: NewPriceRangeIndex) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RegisteredCompletionStruct extends ethereum.Event {
  get params(): RegisteredCompletionStruct__Params {
    return new RegisteredCompletionStruct__Params(this);
  }
}

export class RegisteredCompletionStruct__Params {
  _event: RegisteredCompletionStruct;

  constructor(event: RegisteredCompletionStruct) {
    this._event = event;
  }

  get register(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get completionChecker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get completionExecutor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnregisteredCompletionStruct extends ethereum.Event {
  get params(): UnregisteredCompletionStruct__Params {
    return new UnregisteredCompletionStruct__Params(this);
  }
}

export class UnregisteredCompletionStruct__Params {
  _event: UnregisteredCompletionStruct;

  constructor(event: UnregisteredCompletionStruct) {
    this._event = event;
  }

  get register(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CurvedRandomLostWorld__completionStructsResult {
  value0: Address;
  value1: Address;
  value2: Bytes;

  constructor(value0: Address, value1: Address, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    return map;
  }
}

export class CurvedRandomLostWorld__dividendLevelsResultValue0Struct extends ethereum.Tuple {
  get upperLimit(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class CurvedRandomLostWorld__priceRangesResultValue0Struct extends ethereum.Tuple {
  get upperLimit(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class CurvedRandomLostWorld__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class CurvedRandomLostWorld__variationsResultValue0Struct extends ethereum.Tuple {
  get amount(): i32 {
    return this[0].toI32();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }
}

export class CurvedRandomLostWorld extends ethereum.SmartContract {
  static bind(address: Address): CurvedRandomLostWorld {
    return new CurvedRandomLostWorld("CurvedRandomLostWorld", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SIGNER_ROLE(): Bytes {
    let result = super.call("SIGNER_ROLE", "SIGNER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_SIGNER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("SIGNER_ROLE", "SIGNER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bitMappings(): Array<BigInt> {
    let result = super.call("bitMappings", "bitMappings():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_bitMappings(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("bitMappings", "bitMappings():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  checkCompletionForAddress(address_: Address, data_: Bytes): boolean {
    let result = super.call(
      "checkCompletionForAddress",
      "checkCompletionForAddress(address,bytes):(bool)",
      [ethereum.Value.fromAddress(address_), ethereum.Value.fromBytes(data_)]
    );

    return result[0].toBoolean();
  }

  try_checkCompletionForAddress(
    address_: Address,
    data_: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkCompletionForAddress",
      "checkCompletionForAddress(address,bytes):(bool)",
      [ethereum.Value.fromAddress(address_), ethereum.Value.fromBytes(data_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  completionStructs(
    param0: Address
  ): CurvedRandomLostWorld__completionStructsResult {
    let result = super.call(
      "completionStructs",
      "completionStructs(address):(address,address,bytes)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new CurvedRandomLostWorld__completionStructsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBytes()
    );
  }

  try_completionStructs(
    param0: Address
  ): ethereum.CallResult<CurvedRandomLostWorld__completionStructsResult> {
    let result = super.tryCall(
      "completionStructs",
      "completionStructs(address):(address,address,bytes)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CurvedRandomLostWorld__completionStructsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBytes()
      )
    );
  }

  contextInterpreter(): Address {
    let result = super.call(
      "contextInterpreter",
      "contextInterpreter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_contextInterpreter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "contextInterpreter",
      "contextInterpreter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dividendHandler(): Address {
    let result = super.call(
      "dividendHandler",
      "dividendHandler():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dividendHandler(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dividendHandler",
      "dividendHandler():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dividendLevels(): Array<
    CurvedRandomLostWorld__dividendLevelsResultValue0Struct
  > {
    let result = super.call(
      "dividendLevels",
      "dividendLevels():((uint256,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      CurvedRandomLostWorld__dividendLevelsResultValue0Struct
    >();
  }

  try_dividendLevels(): ethereum.CallResult<
    Array<CurvedRandomLostWorld__dividendLevelsResultValue0Struct>
  > {
    let result = super.tryCall(
      "dividendLevels",
      "dividendLevels():((uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        CurvedRandomLostWorld__dividendLevelsResultValue0Struct
      >()
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCostToMint(count: BigInt): BigInt {
    let result = super.call(
      "getCostToMint",
      "getCostToMint(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(count)]
    );

    return result[0].toBigInt();
  }

  try_getCostToMint(count: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCostToMint",
      "getCostToMint(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(count)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  imageInformationInterpreter(): Address {
    let result = super.call(
      "imageInformationInterpreter",
      "imageInformationInterpreter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_imageInformationInterpreter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "imageInformationInterpreter",
      "imageInformationInterpreter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  imageLinkInformation(): Bytes {
    let result = super.call(
      "imageLinkInformation",
      "imageLinkInformation():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_imageLinkInformation(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "imageLinkInformation",
      "imageLinkInformation():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFullyMinted(): boolean {
    let result = super.call("isFullyMinted", "isFullyMinted():(bool)", []);

    return result[0].toBoolean();
  }

  try_isFullyMinted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFullyMinted", "isFullyMinted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSupply(): BigInt {
    let result = super.call("maxSupply", "maxSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxSupply", "maxSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  metadata(): Bytes {
    let result = super.call("metadata", "metadata():(bytes)", []);

    return result[0].toBytes();
  }

  try_metadata(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("metadata", "metadata():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  metadataInterpreter(): Address {
    let result = super.call(
      "metadataInterpreter",
      "metadataInterpreter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_metadataInterpreter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "metadataInterpreter",
      "metadataInterpreter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceRanges(): Array<CurvedRandomLostWorld__priceRangesResultValue0Struct> {
    let result = super.call(
      "priceRanges",
      "priceRanges():((uint256,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      CurvedRandomLostWorld__priceRangesResultValue0Struct
    >();
  }

  try_priceRanges(): ethereum.CallResult<
    Array<CurvedRandomLostWorld__priceRangesResultValue0Struct>
  > {
    let result = super.tryCall(
      "priceRanges",
      "priceRanges():((uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        CurvedRandomLostWorld__priceRangesResultValue0Struct
      >()
    );
  }

  randomNumberGenerator(): Address {
    let result = super.call(
      "randomNumberGenerator",
      "randomNumberGenerator():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_randomNumberGenerator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "randomNumberGenerator",
      "randomNumberGenerator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyBeeps(): BigInt {
    let result = super.call("royaltyBeeps", "royaltyBeeps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_royaltyBeeps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("royaltyBeeps", "royaltyBeeps():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  royaltyDeterminer(): Address {
    let result = super.call(
      "royaltyDeterminer",
      "royaltyDeterminer():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_royaltyDeterminer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "royaltyDeterminer",
      "royaltyDeterminer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyDeterminerInformation(): Bytes {
    let result = super.call(
      "royaltyDeterminerInformation",
      "royaltyDeterminerInformation():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_royaltyDeterminerInformation(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "royaltyDeterminerInformation",
      "royaltyDeterminerInformation():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  royaltyInfo(
    tokenId: BigInt,
    _salePrice: BigInt
  ): CurvedRandomLostWorld__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );

    return new CurvedRandomLostWorld__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    tokenId: BigInt,
    _salePrice: BigInt
  ): ethereum.CallResult<CurvedRandomLostWorld__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(_salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CurvedRandomLostWorld__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  royaltyToken(): Address {
    let result = super.call("royaltyToken", "royaltyToken():(address)", []);

    return result[0].toAddress();
  }

  try_royaltyToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("royaltyToken", "royaltyToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  signatureVerifier(): Address {
    let result = super.call(
      "signatureVerifier",
      "signatureVerifier():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_signatureVerifier(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "signatureVerifier",
      "signatureVerifier():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenMintContext(param0: BigInt): Bytes {
    let result = super.call(
      "tokenMintContext",
      "tokenMintContext(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBytes();
  }

  try_tokenMintContext(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "tokenMintContext",
      "tokenMintContext(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokensLeftInRange(): BigInt {
    let result = super.call(
      "tokensLeftInRange",
      "tokensLeftInRange():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokensLeftInRange(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensLeftInRange",
      "tokensLeftInRange():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  variationInterpreter(): Address {
    let result = super.call(
      "variationInterpreter",
      "variationInterpreter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_variationInterpreter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "variationInterpreter",
      "variationInterpreter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  variationSelector(): Address {
    let result = super.call(
      "variationSelector",
      "variationSelector():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_variationSelector(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "variationSelector",
      "variationSelector():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  variations(): Array<CurvedRandomLostWorld__variationsResultValue0Struct> {
    let result = super.call(
      "variations",
      "variations():((uint16,bytes)[])",
      []
    );

    return result[0].toTupleArray<
      CurvedRandomLostWorld__variationsResultValue0Struct
    >();
  }

  try_variations(): ethereum.CallResult<
    Array<CurvedRandomLostWorld__variationsResultValue0Struct>
  > {
    let result = super.tryCall(
      "variations",
      "variations():((uint16,bytes)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        CurvedRandomLostWorld__variationsResultValue0Struct
      >()
    );
  }

  wallet(): Address {
    let result = super.call("wallet", "wallet():(address)", []);

    return result[0].toAddress();
  }

  try_wallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("wallet", "wallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ExecuteCompletionCall extends ethereum.Call {
  get inputs(): ExecuteCompletionCall__Inputs {
    return new ExecuteCompletionCall__Inputs(this);
  }

  get outputs(): ExecuteCompletionCall__Outputs {
    return new ExecuteCompletionCall__Outputs(this);
  }
}

export class ExecuteCompletionCall__Inputs {
  _call: ExecuteCompletionCall;

  constructor(call: ExecuteCompletionCall) {
    this._call = call;
  }

  get checkData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get completionData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ExecuteCompletionCall__Outputs {
  _call: ExecuteCompletionCall;

  constructor(call: ExecuteCompletionCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get initializationParams_(): InitializeCallInitializationParams_Struct {
    return changetype<InitializeCallInitializationParams_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get addressHolder_(): InitializeCallAddressHolder_Struct {
    return changetype<InitializeCallAddressHolder_Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get variations_(): Array<InitializeCallVariations_Struct> {
    return this._call.inputValues[2].value.toTupleArray<
      InitializeCallVariations_Struct
    >();
  }

  get dividendLevels_(): Array<InitializeCallDividendLevels_Struct> {
    return this._call.inputValues[3].value.toTupleArray<
      InitializeCallDividendLevels_Struct
    >();
  }

  get priceRanges_(): Array<InitializeCallPriceRanges_Struct> {
    return this._call.inputValues[4].value.toTupleArray<
      InitializeCallPriceRanges_Struct
    >();
  }

  get randomNumberGenerator_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallInitializationParams_Struct extends ethereum.Tuple {
  get name_(): string {
    return this[0].toString();
  }

  get symbol_(): string {
    return this[1].toString();
  }

  get imageLinkInformation_(): Bytes {
    return this[2].toBytes();
  }

  get metadata_(): Bytes {
    return this[3].toBytes();
  }

  get royaltyDeterminerInformation_(): Bytes {
    return this[4].toBytes();
  }

  get signatureData_(): Bytes {
    return this[5].toBytes();
  }

  get royaltyTokenImageURI_(): string {
    return this[6].toString();
  }

  get admin_(): Address {
    return this[7].toAddress();
  }

  get wallet_(): Address {
    return this[8].toAddress();
  }

  get royaltyBeeps_(): i32 {
    return this[9].toI32();
  }

  get tokenFactory_(): Address {
    return this[10].toAddress();
  }
}

export class InitializeCallAddressHolder_Struct extends ethereum.Tuple {
  get royaltyDeterminer(): Address {
    return this[0].toAddress();
  }

  get variationInterpreter(): Address {
    return this[1].toAddress();
  }

  get contextInterpreter(): Address {
    return this[2].toAddress();
  }

  get metadataInterpreter(): Address {
    return this[3].toAddress();
  }

  get imageInformationInterpreter(): Address {
    return this[4].toAddress();
  }

  get signatureVerifier(): Address {
    return this[5].toAddress();
  }

  get dividendHandler(): Address {
    return this[6].toAddress();
  }

  get variationSelector(): Address {
    return this[7].toAddress();
  }
}

export class InitializeCallVariations_Struct extends ethereum.Tuple {
  get amount(): i32 {
    return this[0].toI32();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }
}

export class InitializeCallDividendLevels_Struct extends ethereum.Tuple {
  get upperLimit(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class InitializeCallPriceRanges_Struct extends ethereum.Tuple {
  get upperLimit(): BigInt {
    return this[0].toBigInt();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get verificationParams(): MintCallVerificationParamsStruct {
    return changetype<MintCallVerificationParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCallVerificationParamsStruct extends ethereum.Tuple {
  get to_(): Address {
    return this[0].toAddress();
  }

  get for_(): Address {
    return this[1].toAddress();
  }

  get data_(): Bytes {
    return this[2].toBytes();
  }

  get nonce_(): BigInt {
    return this[3].toBigInt();
  }

  get signature(): Bytes {
    return this[4].toBytes();
  }
}

export class RegisterCompletionStructCall extends ethereum.Call {
  get inputs(): RegisterCompletionStructCall__Inputs {
    return new RegisterCompletionStructCall__Inputs(this);
  }

  get outputs(): RegisterCompletionStructCall__Outputs {
    return new RegisterCompletionStructCall__Outputs(this);
  }
}

export class RegisterCompletionStructCall__Inputs {
  _call: RegisterCompletionStructCall;

  constructor(call: RegisterCompletionStructCall) {
    this._call = call;
  }

  get completionStruct(): RegisterCompletionStructCallCompletionStructStruct {
    return changetype<RegisterCompletionStructCallCompletionStructStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RegisterCompletionStructCall__Outputs {
  _call: RegisterCompletionStructCall;

  constructor(call: RegisterCompletionStructCall) {
    this._call = call;
  }
}

export class RegisterCompletionStructCallCompletionStructStruct extends ethereum.Tuple {
  get completionChecker(): Address {
    return this[0].toAddress();
  }

  get completionExecutor(): Address {
    return this[1].toAddress();
  }

  get preExecuteStep(): Bytes {
    return this[2].toBytes();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnregisterCompletionStructCall extends ethereum.Call {
  get inputs(): UnregisterCompletionStructCall__Inputs {
    return new UnregisterCompletionStructCall__Inputs(this);
  }

  get outputs(): UnregisterCompletionStructCall__Outputs {
    return new UnregisterCompletionStructCall__Outputs(this);
  }
}

export class UnregisterCompletionStructCall__Inputs {
  _call: UnregisterCompletionStructCall;

  constructor(call: UnregisterCompletionStructCall) {
    this._call = call;
  }
}

export class UnregisterCompletionStructCall__Outputs {
  _call: UnregisterCompletionStructCall;

  constructor(call: UnregisterCompletionStructCall) {
    this._call = call;
  }
}
