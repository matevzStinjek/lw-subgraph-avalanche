type LostLayer @entity {
	id: ID!
	address: Bytes!
	key: Bytes!
	name: String!
	parent: LostLayer
	createdTimestamp: Int!

	# children
	lostLayers: [LostLayer!]! @derivedFrom(field: "parent")
	lostWorlds: [LostWorld!]! @derivedFrom(field: "lostLayer")
}

type LostWorld @entity {
	id: ID!
	address: Bytes!
	key: Bytes!
	parsedKey: String!
	name: String!
	lostLayer: LostLayer!

	# metadata
	artist: String!
	location: String!
	lat: BigDecimal!
	long: BigDecimal!
	radius: BigInt!

	# supply
	totalSupply: BigInt!
	maxSupply: BigInt!

	# timestamp
	createdTimestamp: Int!

	# variations
	variations: [Variation!]! @derivedFrom(field: "lostWorld")

	# price ranges
	priceRanges: [PriceRange!]! @derivedFrom(field: "lostWorld")

	# tokens
	tokens: [Token!]! @derivedFrom(field: "lostWorld")
}

type Token @entity {
	id: ID!
	tokenID: BigInt!
	lostWorld: LostWorld!

	# tokenURI
	name: String!
	minterLat: BigDecimal!
	minterLong: BigDecimal!
	image: String!
	imageIPFS: String!

	minter: Bytes!
	createdTimestamp: Int!

	# mutables
	owner: Bytes!
	updatedTimestamp: Int!
	transactions: [TokenTransaction!]! @derivedFrom(field: "token")
	orders: [Order!]! @derivedFrom(field: "token")
	activeOrder: Order
	hasActiveOrder: Boolean!
}

type TokenTransaction @entity {
	id: ID!
	from: Bytes!
	to: Bytes!
	token: Token!
	timestamp: Int!
}

type Order @entity {
	id: ID! # orderId
	token: Token!
	tokenName: String!
	lostWorld: LostWorld!
	price: BigInt!
	seller: Bytes!
	isOpen: Boolean!
	isExecuted: Boolean!
	createdTimestamp: Int!
	updatedTimestamp: Int!
}

type PriceRange @entity {
	id: ID!
	threshold: BigInt!
	price: BigInt!
	lostWorld: LostWorld!
}

type Variation @entity {
	id: ID!
	name: String!
	totalSupply: BigInt!
	maxSupply: BigInt!
	image: String!
	imageIPFS: String!
	lostWorld: LostWorld!
}
